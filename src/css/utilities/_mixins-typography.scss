// Mixins only

@mixin ms-and-vrythm($scale, $margin-adjust: 1.5) {
// Scale is an integer between 0 and x and used with modular-scale
  font-size: ms($scale);
  line-height: line-height-calc($scale, $margin-adjust);
}

//http://trentwalton.com/2011/09/07/css-hyphenation

@mixin css-hyphens($val) {
  // Accepted values: [ none | manual | auto ]
  -webkit-hyphens: $val; // Safari 5.1 thru 6, iOS 4.2 thru 6
  -moz-hyphens: $val; // Firefox 16 thru 20
  -ms-hyphens: $val; // IE10
  -o-hyphens: $val; // PRESTO...haha LOL
  hyphens: $val; // W3C standard
}

// $Mixin $Type-Scale
// -------------------------------------//
// provides a pixel fallback if you decide
// to use 'rems' as a unit over ems.

@mixin type-scale($scale, $base, $value, $measure:"") {
  // If 'rem' is used as a $value then provide a px fallback.
  @if $value == rem {
    font-size: $scale#{px};
  }
  font-size: context-calc($scale, $base, $value);
  @if $measure != "" {
    // margin-bottom: measure-margin($scale, $measure, $value);
    margin-bottom: 0;
  }
}

@mixin font-smooth($type) {
  -webkit-font-smoothing: $type;
}

// Rem font-sizing
//------------------------------------------------------------------------------

// This works with the $base-font-size variable, which MUST be set on <html>.
// <html> is the root for rem calculations. Without it (unless the base is 16px)
// the calculations will be incorrect.

@mixin base-font-size($pixels: $base-font-size) {
  font-size: $pixels + px;
  font-size: $pixels / 16 * 100%;
}

// This function will take the desired pixel result and provide a pixel fallback
// version as well as rem version.  Do not include "px" units as argument.

@mixin font-size($pixels: $base-font-size) {
  font-size: $pixels + px;
  font-size: $pixels / $base-font-size + rem;
}
